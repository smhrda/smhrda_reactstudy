[리덕스 키워드 ]
1. 액션
- 상태 변화가 필요할 때 발생
- 하나의 객체로 표현
- type은 필수, 나머지는 마음대로

2. 액션 생성함수
- 파라미터를 받아 액션 객체 형태로 만듦
- 컴포넌트에서 더욱 쉽게 액션을 발생시키기 위해 사용

3. 리듀서
- 변화를 일으키는 함수
- state, action 두 가지 파라미터
- 현재 상태와 전달 받은 액션을 참고하여 새로운 상태를 만들어 반환
- 리덕스의 리듀서에서는 default: return state (기존 state 그대로 반환)
- 여러 리듀서를 합치면 root reducer / 그 안의 작은 sub reducer로 구성

4. 스토어
- 한 애플리케이션 당 하나의 스토어
- 현재 앱 상태, 리듀서, 내장 함수가 들어있음

5. 디스패치
- 스토어의 내장 함수
- 액션을 파라미터로 전달하여 발생시킴 dispatch(action)
- dispatch 호출 -> 스토어는 리듀서 함수 실행 -> 해당 액션 처리 로직 -> 새로운 상태 만들어 반환

6. 구독 subscribe
- 스토어의 내장 함수
- 함수 형태의 값을 파라미터로 받음
- subscribe에 특정 함수 전달 -> 액션이 디스패치 되었을 때마다 전달해준 함수 호출
- 리액트에서는 connect 또는 useSelect Hook 사용


[리덕스의 규칙]
1. 하나의 애플리케이션에, 하나의 스토어

2. 상태는 읽기 전용
- 리액트와 마찬가지로, 기존 상태는 건드리지 않고 새로운 상태를 생성하여 업데이트하는 방식(불변성)
- 불변성 유지 이유 : 데이터 변경을 감지하기 위해 내부 데이터를 전부 찾아보는 것은 시간 많이 소요
		-> 기존 상태의 객체를 새로운 객체로 변경하면 객체의 주소가 다르므로 변경을 쉽게 감지할 수 있음

3. 리듀서는 순수한 함수
- 리듀서 함수는 이전 상태와 액션 객체를 파라미터로 받음
- 이전 상태는 건드리지 않고, 변화를 일으킨 새로운 상태 객체를 만들어서 반환해야 함
- 똑같은 파라미터로 호출된 리듀서 함수는 언제나 똑같은 결과값을 반환해야 함(동일한 인풋 - 동일한 아웃풋)
	- ex. new Date(), random()같은 순수하지 않은 작업은 리듀서 함수의 밖에서 처리해야 함!
